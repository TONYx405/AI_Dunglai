import pygame
import random as rd
import math
from sklearn.cluster import KMeans
				
def distance(p1,p2):
	return math.sqrt((p1[0]-p2[0]) * (p1[0]-p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]))

pygame.init()

screen = pygame.display.set_mode((1000,600))

pygame.display.set_caption("kmeans visualization")

running = True

clock = pygame.time.Clock()

BACKGROUND = (125, 125, 125)
BLACK = (0,0,0)
WHITE = (255,255,255)
BACKGROUND_PANEL = (249, 255, 230)
RED = ((255,0,0))
ORANGE = ((255,100,10))
PINK = ((255,100,180))
PURPLE = ((240,0,255))
BROWN = ((100,40,0))
GREEN = ((0,255,0))
NAVY_BLUE = ((0,0,100))
SKY_BLUE = ((0,255,255))

COLOR=[RED,GREEN,PINK,PURPLE,BROWN,ORANGE,NAVY_BLUE,SKY_BLUE]

K=0
error=0
points=[]
clusters=[]
labels=[]


font = pygame.font.SysFont('sans', 40)
font_small = pygame.font.SysFont('sans', 20)
text_plus = font.render('+', True, WHITE)
text_minus = font.render('-', True, WHITE)
text_K = font.render('K =', True, WHITE)
# text_value_K = font.render(str(K), True, WHITE)	
text_random = font.render('Random', True, WHITE)
text_run = font.render('Run', True, WHITE)
text_algorithm = font.render('Algorithm', True, WHITE)
text_reset = font.render('Reset', True, WHITE)
text_error = font.render('error =', True, WHITE)

while running:
	mouse_x,mouse_y = pygame.mouse.get_pos()
	clock.tick(60)
	screen.fill(BACKGROUND)

	#Draw panel
	pygame.draw.rect(screen, BLACK,(47,47,506,506))
	pygame.draw.rect(screen, BACKGROUND_PANEL, (50,50,500,500))

	#Draw button
	pygame.draw.rect(screen, BLACK,(600,50,50,50))
	pygame.draw.rect(screen, BLACK, (700,50,50,50))
	screen.blit(text_minus,(725,50))
	screen.blit(text_plus,(625,50))

	#K
	text_value_K = font.render(str(K), True, WHITE)	

	screen.blit(text_K,(800,50))
	screen.blit(text_value_K,(875,50))

	#Random button
	pygame.draw.rect(screen,BLACK,(600,150,175,50))
	screen.blit(text_random,(625,150))

	#Run button
	pygame.draw.rect(screen,BLACK,(600,250,175,50))
	screen.blit(text_run,(650,250))

	#Algorithm button
	pygame.draw.rect(screen, BLACK,(600,350,175,50))
	screen.blit(text_algorithm,(625,350))

	#Reset button
	pygame.draw.rect(screen, BLACK,(600,450,175,50))
	screen.blit(text_reset,(650,450))

	# Draw mouse position when mouse is in panel
	if 50 < mouse_x < 550 and 50 < mouse_y < 550:
		text_mouse = font_small.render("(" + str(mouse_x - 50) + "," + str(mouse_y - 50) + ")",True, BLACK)
		screen.blit(text_mouse, (mouse_x + 10, mouse_y))


	for event in pygame.event.get():
		if event.type == pygame.MOUSEBUTTONUP:
			# get click points
			if (50<mouse_x<550) and (50<mouse_y<550):
				labels=[]
				point=(mouse_x-50,mouse_y-50)
				points.append(point)

			# random button
			if (600<mouse_x<775) and (150<mouse_y<200):
				clusters=[]
				for i in range(K):
					random_point=(rd.randint(50,550),rd.randint(50,550))
					clusters.append(random_point)

			# run button
			if (600<mouse_x<775) and (250<mouse_y<300):
				labels=[]
				if clusters==[]:
					continue
				for p in points:
					distances_to_cluster=[]
					for c in clusters:
						distance_to_cluster=distance(p,c)
						error+=distance_to_cluster
						distances_to_cluster.append(distance_to_cluster)
					min_distance=min(distances_to_cluster)
					min_index=distances_to_cluster.index(min_distance)
					labels.append(min_index)

				# update clusters
				for i in range(K):
					sum_x=0
					sum_y=0
					count=0
					for j in range(len(labels)):
						if labels[j]==i:
							sum_x+=points[j][0]+50
							sum_y+=points[j][1]+50
							count+=1
						if count!=0:
							new_cluster_x=sum_x/count
							new_cluster_y=sum_y/count
							clusters[i]=(new_cluster_x,new_cluster_y)

			# algorithm button
			if (600<mouse_x<775) and (350<mouse_y<400):
				print("Algorithm button")
				try:
					kmeans = KMeans(n_clusters=K, random_state=0).fit(points)
					labels=kmeans.labels_
					clusters=kmeans.cluster_centers_ + 50
				except:
					print("error")

			# reset
			if (600<mouse_x<775) and (450<mouse_y<500):
				points=[]
				clusters=[]
				labels=[]
				error=0
				K=0

			# K plus
			if (600<mouse_x<650) and (50<mouse_y<100):
				if K>7:
					continue
				K+=1
				labels=[]

			# K minus
			if (700<mouse_x<750) and (50<mouse_y<100):
				if K<1:
					continue
				K-=1
				labels=[]

		if event.type == pygame.QUIT:
			running = False

	# draw clusters
	for i in range(len(clusters)):
		pygame.draw.rect(screen, BLACK,(clusters[i][0],clusters[i][1],10,10))
		pygame.draw.rect(screen, COLOR[i],(clusters[i][0]+1,clusters[i][1]+1,8,8))

	# draw points
	for i in range(len(points)):
		pygame.draw.circle(screen, BLACK,(points[i][0]+50,points[i][1]+50),6)
		if labels==[]:
			pygame.draw.circle(screen, BACKGROUND_PANEL,(points[i][0]+50,points[i][1]+50),5)
		else:
			pygame.draw.circle(screen, COLOR[labels[i]],(points[i][0]+50,points[i][1]+50),5)

	# calculate and draw error 
	error=0
	if (clusters!= []) and (labels!= []):
		for i in range(len(points)):
			error+=distance(points[i],clusters[labels[i]])

	text_error = font.render('error ='+str(int(error)), True, WHITE)
	screen.blit(text_error,(800,300))
	pygame.display.flip()

pygame.quit()
